{% extends 'base.html.twig' %}

{% block title %}NFT Drop Calendar{% endblock %}

{% block body %}
    <div id="menu">
        <div id="menu-navi">
            <div class="row" style="margin-bottom: 15px;">
                <div class="col col-md-1" style="width: 5%;">
                    <label for="timezone">Timezone: </label></div>
                <div class="col col-md-1" style="width: 10%;">
                    <input class="form-control" type="text" name="timezone" value="" style="height: 30px;" />
                </div>
                    <div class="col col-md-2" style="width: 10%;">
                  <button type="button" class="btn btn-primary btn-sm move-today" data-action="add-timezone">Add Timezone</button>
                </div>

                <div class="col col-md-7">
                    <button type="button" class="btn btn-primary btn-sm move-today" data-action="move-today">Today</button>
                    <button type="button" class="btn btn-primary btn-sm move-today" data-action="view-monthly">Monthly</button>
                    <button type="button" class="btn btn-primary btn-sm move-today" data-action="view-weekly">Weekly</button>
                    <button type="button" class="btn btn-primary btn-sm move-today" data-action="view-daily">Day</button>
                    <button type="button" class="btn btn-primary btn-sm move-day" data-action="move-prev">
                        <i class="bi bi-arrow-left" data-action="move-prev"></i>
                    </button>
                    <button type="button" class="btn btn-primary btn-sm move-day" data-action="move-next">
                        <i class="bi bi-arrow-right" data-action="move-next"></i>
                    </button>
                    <span id="renderRange" class="render-range" style="margin-left: 10px;"></span>
                </div>
            </div>
        </div>
    </div>

    <div id="calendar" style="height: 800px;"></div>
{% endblock %}

{% block javascripts_user_defined %}
    <script src="https://uicdn.toast.com/tui.code-snippet/v1.5.2/tui-code-snippet.min.js"></script>
    <script src="https://uicdn.toast.com/tui.time-picker/latest/tui-time-picker.min.js"></script>
    <script src="https://uicdn.toast.com/tui.date-picker/latest/tui-date-picker.min.js"></script>
    <script src="https://uicdn.toast.com/tui-calendar/latest/tui-calendar.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.20.1/moment.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment-timezone/0.5.31/moment-timezone-with-data.js" integrity="sha512-ECoTMVFwwVtxjEBRjUMjviUd6hBjwDhBJI0+3W2YDs+ld5rHHUDr59T15gxwEPkGu5XLmkASUSvPgQe/Tpyodg==" crossorigin="anonymous"></script>

    <script>
        var timezones = [
            {
                timezoneName: 'UTC',
                displayLabel: 'UTC',
                tooltip: 'UTC'
            }
        ];

        var currentCalendarDate = function(format) {
            var currentDate = moment([cal.getDate().getFullYear(), cal.getDate().getMonth(), cal.getDate().getDate()]);

            return currentDate.format(format);
        }

        var setRenderRangeText = function() {
            var renderRange = document.getElementById('renderRange');
            var options = cal.getOptions();
            var viewName = cal.getViewName();

            var html = [];
            if (viewName === 'day') {
                html.push(currentCalendarDate('YYYY.MM.DD'));
            } else if (viewName === 'month' &&
                (!options.month.visibleWeeksCount || options.month.visibleWeeksCount > 4)) {
                html.push(currentCalendarDate('YYYY.MM'));
            } else {
                html.push(moment(cal.getDateRangeStart().getTime()).format('YYYY.MM.DD'));
                html.push(' ~ ');
                html.push(moment(cal.getDateRangeEnd().getTime()).format(' MM.DD'));
            }
            renderRange.innerHTML = html.join('');
        }

        var getDataAction = function(target) {
            return target.dataset ? target.dataset.action : target.getAttribute('data-action');
        }

        var onClickNavi = function (e) {
            var action = getDataAction(e.target);

            switch (action) {
                case 'move-prev':
                    cal.prev();
                    break;
                case 'move-next':
                    cal.next();
                    break;
                case 'move-today':
                    cal.today();
                    break;
                case 'view-monthly':
                    cal.changeView('month', true)
                    break;
                case 'view-weekly':
                    cal.changeView('week', true)
                    break;
                case 'view-daily':
                    cal.changeView('day', true)
                    break;
                case 'add-timezone':
                    if (document.getElementsByName('timezone')[0].value != undefined && document.getElementsByName('timezone')[0].value.length <= 0) {
                        break;
                    }

                    if (moment.tz.zone(document.getElementsByName('timezone')[0].value) == undefined) {
                        break;
                    }

                    timezones.push({
                        timezoneName: document.getElementsByName('timezone')[0].value,
                        displayLabel: document.getElementsByName('timezone')[0].value,
                        tooltip: document.getElementsByName('timezone')[0].value
                    })
                    var options = cal.getOptions();
                    options['timezone'] = timezoneObjectCreator(timezones);
                    cal.setOptions(options, false);
                    break;
                default:
                    return;
            }

            setRenderRangeText();
            setSchedules();
        }

        var setSchedules = function () {
            var dateStart = cal.getDateRangeStart().toDate().toISOString();
            var dateEnd = cal.getDateRangeEnd().toDate().toISOString();

            console.log(dateStart, dateEnd);

            var params = new URLSearchParams({
                start_date: dateStart,
                end_date: dateEnd
            });

            cal.clear();

            fetch('{{ app.request.baseUrl }}/project/calendar/schedules?' + params.toString())
                .then(function (response) {
                    return response.json();
                })
                .then(function (data) {
                    var schedules = [];

                    data.forEach(function (nftEvent, key) {
                        var body = '<p>Type: '+nftEvent.type+'</p>';

                        if (nftEvent.initialPrice != null && nftEvent.currency != null) {
                            body = body + '<p>Mint price: '+nftEvent.initialPrice+' '+nftEvent.currency+'</p>';
                        }

                        if (nftEvent.url != null) {
                            body = body + '<p><a target="_blank" href="' + nftEvent.url + '"><i class="bi bi-globe"></i>' + nftEvent.url + '</a></p>';
                        }

                        if (nftEvent.twitterUrl != null) {
                            body = body + '<p><a target="_blank" href="' + nftEvent.twitterUrl + '"><i class="bi bi-twitter"></i>' + nftEvent.twitterUrl + '</a></p>';
                        }

                        var schedule = {
                            id: key,
                            calendarId: 1,
                            category: 'time',
                            dueDateClass: '',
                            title: nftEvent.name,
                            isReadOnly: true,
                            body: body
                        };

                        if (nftEvent.eventDateStart == null && nftEvent.eventDateEnd == null) {
                            schedule['isAllDay'] = true;
                        }

                        if (nftEvent.eventDateStart != null) {
                            schedule['start'] = nftEvent.eventDateStart;
                        }

                        if (nftEvent.eventDateEnd != null) {
                            schedule['end'] = nftEvent.eventDateEnd;
                        }

                        schedules.push(schedule);
                    });

                    cal.createSchedules(schedules);


                    cal.render(true);
                })
                .catch(function (error) {
                    console.error(error);
                });
        }

        var setEventListener = function(resizeThrottled) {
            document.getElementById('menu-navi').onclick = onClickNavi;

            window.addEventListener('resize', resizeThrottled);
        }

        {% if account != null %}
        if (moment.tz.zone('{{ account.timezone }}') != undefined) {
            timezones.push({
                timezoneName: '{{ account.timezone }}',
                displayLabel: '{{ account.timezone }}',
                tooltip: '{{ account.timezone }}'
            })
        } else {
            timezones.push({
                timezoneName: moment.tz.guess(),
                displayLabel: moment.tz.guess(),
                tooltip: moment.tz.guess()
            })
        }
        {% endif %}

        var timezoneObjectCreator = function (_timezones) {
            return {
                zones: _timezones,
                offsetCalculator: function(timezoneName, timestamp){
                    // e.g. +09:00 => -540, -04:00 => 240
                    return moment.tz.zone(timezoneName).utcOffset(timestamp);
                }
            };
        };

        var Calendar = tui.Calendar;
        var cal = new Calendar('#calendar', {
            calendars: [{
                id: '1',
                name: 'My Calendar',
                color: '#ffffff',
                bgColor: '#9e5fff',
                dragBgColor: '#9e5fff',
                borderColor: '#9e5fff'
            }],
            defaultView: 'week', // set 'week' or 'day'
            timezone: timezoneObjectCreator(timezones),
            useDetailPopup: true,
            taskView: false,
            scheduleView: ['time']
        });

        var resizeThrottled = tui.util.throttle(function() {
            cal.render();
        }, 50);

        document.addEventListener("DOMContentLoaded", function() {
            setRenderRangeText();
            setSchedules();
            setEventListener(resizeThrottled);
            document.getElementById('menu-navi').onclick = onClickNavi;
        });
    </script>
{% endblock %}
